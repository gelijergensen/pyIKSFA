import source.Kernel as Kernel
import numpy as np
from testUtils import testFunction

def test_LinearKernel_getDimension():
    kernel = Kernel.LinearKernel

    statement = "The method _getDimension on LinearKernel will return the dimension of the data after the linear " + \
                "expansion function is applied"
    
    expected_result = 5
    actual_result = kernel._getDimension(1, (5, 0))
    testFunction(statement, expected_result, actual_result)

    expected_result = 7
    actual_result = kernel._getDimension(1, (7, 20))
    testFunction(statement, expected_result, actual_result)

def test_LinearKernel_getMatrix():
    kernel = Kernel.LinearKernel

    statement = "The method _getMatrix on LinearKernel will return a matrix(i, j) containing 1 + the result of dot " + \
                "products of the ith column of the left matrix with the jth column of the right matrix"

    expected_result = "ValueError"
    try:
        actual_result = kernel._getMatrix(1, 1, np.array([[1], [2]]), np.array([[1], [2], [3]]))
    except ValueError:
        actual_result = "ValueError"
    testFunction(statement, expected_result, actual_result)

    expected_result = 1 + np.array([[14]])
    actual_result = kernel._getMatrix(1, 1, np.array([[1], [2], [3]]), np.array([[1], [2], [3]]))
    testFunction(statement, expected_result, actual_result)

    A = np.arange(200).reshape(10, 20)
    B = np.arange(20, 180).reshape(10, 16)
    C = np.array([[109200,110100,111000,111900,112800,113700,114600,115500,116400,117300
                  ,118200,119100,120000,120900,121800,122700],
                  [110120,111030,111940,112850,113760,114670,115580,116490,117400,118310
                  ,119220,120130,121040,121950,122860,123770],
                  [111040,111960,112880,113800,114720,115640,116560,117480,118400,119320
                  ,120240,121160,122080,123000,123920,124840],
                  [111960,112890,113820,114750,115680,116610,117540,118470,119400,120330
                  ,121260,122190,123120,124050,124980,125910],
                  [112880,113820,114760,115700,116640,117580,118520,119460,120400,121340
                  ,122280,123220,124160,125100,126040,126980],
                  [113800,114750,115700,116650,117600,118550,119500,120450,121400,122350
                  ,123300,124250,125200,126150,127100,128050],
                  [114720,115680,116640,117600,118560,119520,120480,121440,122400,123360
                  ,124320,125280,126240,127200,128160,129120],
                  [115640,116610,117580,118550,119520,120490,121460,122430,123400,124370
                  ,125340,126310,127280,128250,129220,130190],
                  [116560,117540,118520,119500,120480,121460,122440,123420,124400,125380
                  ,126360,127340,128320,129300,130280,131260],
                  [117480,118470,119460,120450,121440,122430,123420,124410,125400,126390
                  ,127380,128370,129360,130350,131340,132330],
                  [118400,119400,120400,121400,122400,123400,124400,125400,126400,127400
                  ,128400,129400,130400,131400,132400,133400],
                  [119320,120330,121340,122350,123360,124370,125380,126390,127400,128410
                  ,129420,130430,131440,132450,133460,134470],
                  [120240,121260,122280,123300,124320,125340,126360,127380,128400,129420
                  ,130440,131460,132480,133500,134520,135540],
                  [121160,122190,123220,124250,125280,126310,127340,128370,129400,130430
                  ,131460,132490,133520,134550,135580,136610],
                  [122080,123120,124160,125200,126240,127280,128320,129360,130400,131440
                  ,132480,133520,134560,135600,136640,137680],
                  [123000,124050,125100,126150,127200,128250,129300,130350,131400,132450
                  ,133500,134550,135600,136650,137700,138750],
                  [123920,124980,126040,127100,128160,129220,130280,131340,132400,133460
                  ,134520,135580,136640,137700,138760,139820],
                  [124840,125910,126980,128050,129120,130190,131260,132330,133400,134470
                  ,135540,136610,137680,138750,139820,140890],
                  [125760,126840,127920,129000,130080,131160,132240,133320,134400,135480
                  ,136560,137640,138720,139800,140880,141960],
                  [126680,127770,128860,129950,131040,132130,133220,134310,135400,136490
                  ,137580,138670,139760,140850,141940,143030]])
    expected_result = 1 + C
    actual_result = kernel._getMatrix(1, 1, A, B)

    # TODO you need to add a case for complex entries

    
if __name__ == "__main__":
    test_LinearKernel_getDimension()
    test_LinearKernel_getMatrix()